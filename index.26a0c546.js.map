{"mappings":"AAAO,MAAMA,EAAiBC,OAAOC,WAAW,gCAAgCC,QAC5E,cACA,eCAJC,SAASC,cAAc,oBACpBC,sBAAsB,YAAY,ICD/B,MAOJC,cACEC,KAAKC,QAAUL,SAASM,cAAc,QACtCF,KAAKC,QAAQE,UAAY,gpMA8IzBH,KAAKC,QAAQG,iBAAiB,UAAWC,GAAUA,EAAMC,mBACzDN,KAAKC,QAAQM,OAAS,cAEtBP,KAAKQ,OAASR,KAAKC,QAAQJ,cAAc,WAEzCG,KAAKS,KAAOT,KAAKC,QAAQJ,cAAc,SAEvCG,KAAKU,MAAQV,KAAKC,QAAQJ,cAAc,UAExCG,KAAKW,MAAQX,KAAKC,QAAQJ,cAAc,UAExC,MAAMe,EAAkBhB,SAASiB,eAC/B,oBAEFb,KAAKW,MAAMP,iBAAiB,UAAU,KACpC,IAAIO,EAAQX,KAAKW,MAAMG,MFpKG,2BEqKtBH,IACFA,EAAQnB,GAEVoB,EAAgBG,KAAO,uBAAuBJ,cAC9C,MAAMK,EAAU,CACdC,KAAM,Y,MACNN,GAEiBf,SAASC,cAAc,UAC/BqB,cAAeC,YAAYH,EAASI,SAASC,OAAM,IAG7CrB,KAAKC,QAAQJ,cAC9B,gBAESO,iBAAiB,SAAS,IACnCJ,KAAKsB,oBAAoBtB,KAAKQ,OAAOe,eAGvCvB,KAAKC,QAAQG,iBAAiB,UAAU,IAAMJ,KAAKwB,iBACnDxB,KAAKC,QAAQG,iBAAiB,SAAS,IAAMJ,KAAKwB,iBAClDxB,KAAKwB,cACP,CAEQA,eACN,MAAMC,EAAUzB,KAAKC,QAAQJ,cAC3B,iCAEF,IAAI6B,EAGFA,EADoB,iBAAlBD,EAAQX,MACId,KAAK2B,0BACjB,eACA,6BAEyB,kBAAlBF,EAAQX,MACHd,KAAK2B,0BACjB,aACA,qBAGY3B,KAAK2B,0BAA0B,aAAcF,EAAQX,OAErEd,KAAKQ,OAAOL,UAAYH,KAAK4B,iBAC3B5B,KAAK2B,0BACH,OACoB,KAApB3B,KAAKS,KAAKK,MAAe,oBAAsBd,KAAKS,KAAKK,OAEzD,KACAY,EACA,MACC1B,KAAKU,MAAMI,MACRd,KAAK2B,0BAA0B,QAAS3B,KAAKU,MAAMI,OAAS,KAC5D,IACJd,KAAK2B,0BAA0B,QAAS3B,KAAKW,MAAMG,OACnD,KACAd,KAAK2B,0BAA0B,cAAe,aAEpD,CAEQA,0BAA0BE,EAAcf,GAE9C,MAAO,kDAAkDe,4DAA+Df,8CAC1H,CAEQc,iBAAiBE,GAEvB,MAAO,6OAA6OA,yJACtP,CAEQR,oBAAoBS,GAC1B,MAAMC,EAAWpC,SAASM,cAAc,YAExC8B,EAASC,MAAMC,QAAU,6HACzBF,EAASlB,MAAQiB,EACjBnC,SAASuC,KAAKC,YAAYJ,GAC1BA,EAASK,SACT,IACEzC,SAAS0C,YAAY,OAEtB,CAAC,MAAOC,GAAK,CACd3C,SAASuC,KAAKK,YAAYR,EAC5B,IDxPgE/B","sources":["src/preferred-theme.ts","src/index.ts","src/configuration-component.ts"],"sourcesContent":["export const preferredTheme = window.matchMedia('(prefers-color-scheme: dark)').matches\n  ? 'github-dark'\n  : 'github-light';\n\nexport const preferredThemeId = 'preferred-color-scheme';","import { ConfigurationComponent } from './configuration-component';\n\ndocument.querySelector('h2#configuration')!\n  .insertAdjacentElement('afterend', new ConfigurationComponent().element);\n","import { preferredThemeId, preferredTheme } from \"./preferred-theme\";\n\nexport class ConfigurationComponent {\n  public readonly element: HTMLFormElement;\n  private readonly script: HTMLDivElement;\n  private readonly repo: HTMLInputElement;\n  private readonly label: HTMLInputElement;\n  private readonly theme: HTMLSelectElement;\n\n  constructor() {\n    this.element = document.createElement(\"form\");\n    this.element.innerHTML = `\n      <h3 id=\"heading-repository\">Repository</h3>\n      <p>\n        Choose the repository utterances will connect to.\n      </p>\n      <ol>\n        <li>Make sure the repo is public, otherwise your readers will not be able to view the issues/comments.</li>\n        <li>Make sure the <a href=\"https://github.com/apps/utterances\">utterances app</a>\n          is installed on the repo, otherwise users will not be able to post comments.\n        </li>\n        <li>If your repo is a fork, navigate to its <em>settings</em> tab and confirm\n          the <em>issues</em> feature is turned on. </li>\n      </ol>\n      <fieldset>\n        <div>\n          <label for=\"repo\">repo:</label><br/>\n          <input id=\"repo\" class=\"form-control\" type=\"text\" placeholder=\"owner/repo\">\n          <p class=\"note\">\n            A <strong>public</strong> GitHub repository. This is where the blog\n            post issues and issue-comments will be posted.\n          </p>\n        </div>\n      </fieldset>\n\n      <h3 id=\"heading-mapping\">Blog Post ‚ÜîÔ∏è Issue Mapping</h3>\n      <p>Choose the mapping between blog posts and GitHub issues.</p>\n      <fieldset>\n        <div class=\"form-checkbox\">\n          <label>\n            <input type=\"radio\" value=\"pathname\" name=\"mapping\" checked=\"checked\">\n            Issue title contains page pathname\n            <p class=\"note\">\n              Utterances will search for an issue whose title contains the blog post's pathname\n              URL component. If a matching issue is not found, Utterances will automatically\n              create one the first time someone comments on your post.\n            </p>\n          </label>\n        </div>\n        <div class=\"form-checkbox\">\n          <label>\n            <input type=\"radio\" value=\"url\" name=\"mapping\">\n            Issue title contains page URL\n            <p class=\"note\">\n              Utterances will search for an issue whose title contains the blog post's URL.\n              If a matching issue is not found, Utterances will automatically create one the first\n              time someone comments on your post.\n            </p>\n          </label>\n        </div>\n        <div class=\"form-checkbox\">\n          <label>\n            <input type=\"radio\" value=\"title\" name=\"mapping\">\n            Issue title contains page title\n            <p class=\"note\">\n              Utterances will search for an issue whose title contains the blog post's title.\n              If a matching issue is not found, Utterances will automatically create one the first\n              time someone comments on your post.\n            </p>\n          </label>\n        </div>\n        <div class=\"form-checkbox\">\n          <label>\n            <input type=\"radio\" value=\"og:title\" name=\"mapping\">\n            Issue title contains page og:title\n            <p class=\"note\">\n              Utterances will search for an issue whose title contains the page's\n              <a href=\"http://ogp.me/\">Open Graph</a> title meta.\n              If a matching issue is not found, Utterances will automatically create one the first\n              time someone comments on your post.\n            </p>\n          </label>\n        </div>\n        <div class=\"form-checkbox\">\n          <label>\n            <input type=\"radio\" value=\"issue-number\" name=\"mapping\">\n            Specific issue number\n            <p class=\"note\">\n              You configure Utterances to load a specific issue by number. Issues are not automatically\n              created.\n            </p>\n          </label>\n        </div>\n        <div class=\"form-checkbox\">\n          <label>\n            <input type=\"radio\" value=\"specific-term\" name=\"mapping\">\n            Issue title contains specific term\n            <p class=\"note\">\n              You configure Utterances to search for an issue whose title contains a specific term of your choosing.\n              If a matching issue is not found, Utterances will automatically create one the first\n              time someone comments on your post. The issue's title will be the term you chose.\n            </p>\n          </label>\n        </div>\n      </fieldset>\n\n      <h3 id=\"heading-issue-label\">Issue Label</h3>\n      <p>\n        Choose the label that will be assigned to issues created by Utterances.\n      </p>\n      <fieldset>\n        <div>\n          <label for=\"label\">label (optional):</label><br/>\n          <input id=\"label\" class=\"form-control\" type=\"text\" placeholder=\"Comment\">\n          <p class=\"note\">\n            Label names are case sensitive.\n            The label must exist in your repo-\n            Utterances cannot attach labels that do not exist.\n            Emoji are supported in label names.‚ú®üí¨‚ú®\n          </p>\n        </div>\n      </fieldset>\n\n      <h3 id=\"heading-theme\">Theme</h3>\n      <p>\n        Choose an Utterances theme that matches your blog.\n        Can't find a theme you like?\n        <a href=\"https://github.com/utterance/utterances/blob/master/CONTRIBUTING.md\">Contribute</a> a custom theme.\n      </p>\n\n      <select id=\"theme\" class=\"form-select\" value=\"github-light\" aria-label=\"Theme\">\n        <option value=\"github-light\">GitHub Light</option>\n        <option value=\"github-dark\">GitHub Dark</option>\n        <option value=\"preferred-color-scheme\">Preferred Color Scheme</option>\n        <option value=\"github-dark-orange\">GitHub Dark Orange</option>\n        <option value=\"icy-dark\">Icy Dark</option>\n        <option value=\"dark-blue\">Dark Blue</option>\n        <option value=\"photon-dark\">Photon Dark</option>\n        <option value=\"boxy-light\">Boxy Light</option>\n        <option value=\"gruvbox-dark\">Gruvbox Dark</option>\n      </select>\n\n      <h3 id=\"heading-enable\">Enable Utterances</h3>\n\n      <p>Add the following script tag to your blog's template. Position it where you want the\n      comments to appear. Customize the layout using the <code>.utterances</code> and\n      <code>.utterances-frame</code> selectors.\n      </p>\n      <div class=\"config-field\" id=\"script\" class=\"highlight highlight-text-html-basic\"></div>\n      <button id=\"copy-button\" type=\"button\" class=\"btn btn-blue code-action\">Copy</button>\n      <br/>\n      <br/>`;\n\n    this.element.addEventListener(\"submit\", (event) => event.preventDefault());\n    this.element.action = \"javascript:\";\n\n    this.script = this.element.querySelector(\"#script\") as HTMLDivElement;\n\n    this.repo = this.element.querySelector(\"#repo\") as HTMLInputElement;\n\n    this.label = this.element.querySelector(\"#label\") as HTMLInputElement;\n\n    this.theme = this.element.querySelector(\"#theme\") as HTMLSelectElement;\n\n    const themeStylesheet = document.getElementById(\n      \"theme-stylesheet\"\n    ) as HTMLLinkElement;\n    this.theme.addEventListener(\"change\", () => {\n      let theme = this.theme.value;\n      if (theme === preferredThemeId) {\n        theme = preferredTheme;\n      }\n      themeStylesheet.href = `/stylesheets/themes/${theme}/index.css`;\n      const message = {\n        type: \"set-theme\",\n        theme,\n      };\n      const utterances = document.querySelector(\"iframe\")!;\n      utterances.contentWindow!.postMessage(message, location.origin);\n    });\n\n    const copyButton = this.element.querySelector(\n      \"#copy-button\"\n    ) as HTMLButtonElement;\n    copyButton.addEventListener(\"click\", () =>\n      this.copyTextToClipboard(this.script.textContent as string)\n    );\n\n    this.element.addEventListener(\"change\", () => this.outputConfig());\n    this.element.addEventListener(\"input\", () => this.outputConfig());\n    this.outputConfig();\n  }\n\n  private outputConfig() {\n    const mapping = this.element.querySelector(\n      'input[name=\"mapping\"]:checked'\n    ) as HTMLInputElement;\n    let mappingAttr: string;\n    // tslint:disable-next-line:prefer-conditional-expression\n    if (mapping.value === \"issue-number\") {\n      mappingAttr = this.makeConfigScriptAttribute(\n        \"issue-number\",\n        \"[ENTER ISSUE NUMBER HERE]\"\n      );\n    } else if (mapping.value === \"specific-term\") {\n      mappingAttr = this.makeConfigScriptAttribute(\n        \"issue-term\",\n        \"[ENTER TERM HERE]\"\n      );\n    } else {\n      mappingAttr = this.makeConfigScriptAttribute(\"issue-term\", mapping.value);\n    }\n    this.script.innerHTML = this.makeConfigScript(\n      this.makeConfigScriptAttribute(\n        \"repo\",\n        this.repo.value === \"\" ? \"[ENTER REPO HERE]\" : this.repo.value\n      ) +\n        \"\\n\" +\n        mappingAttr +\n        \"\\n\" +\n        (this.label.value\n          ? this.makeConfigScriptAttribute(\"label\", this.label.value) + \"\\n\"\n          : \"\") +\n        this.makeConfigScriptAttribute(\"theme\", this.theme.value) +\n        \"\\n\" +\n        this.makeConfigScriptAttribute(\"crossorigin\", \"anonymous\")\n    );\n  }\n\n  private makeConfigScriptAttribute(name: string, value: string) {\n    // tslint:disable-next-line:max-line-length\n    return `<span class=\"pl-s1\">        <span class=\"pl-e\">${name}</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>${value}<span class=\"pl-pds\">\"</span></span></span>`;\n  }\n\n  private makeConfigScript(attrs: string) {\n    // tslint:disable-next-line:max-line-length\n    return `<pre><span class=\"pl-s1\">&lt;<span class=\"pl-ent\">script</span> <span class=\"pl-e\">src</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>https://jungley8.github.io/utterances/client.js<span class=\"pl-pds\">\"</span></span></span>\\n${attrs}\\n<span class=\"pl-s1\">        <span class=\"pl-e\">async</span>&gt;</span>\\n<span class=\"pl-s1\">&lt;/<span class=\"pl-ent\">script</span>&gt;</span></pre>`;\n  }\n\n  private copyTextToClipboard(text: string) {\n    const textArea = document.createElement(\"textarea\");\n    // tslint:disable-next-line:max-line-length\n    textArea.style.cssText = `position:fixed;top:0;left:0;width:2em;height:2em;padding:0;border:none;outline:none;box-shadow:none;background:transparent`;\n    textArea.value = text;\n    document.body.appendChild(textArea);\n    textArea.select();\n    try {\n      document.execCommand(\"copy\");\n      // tslint:disable-next-line:no-empty\n    } catch (err) {}\n    document.body.removeChild(textArea);\n  }\n}\n"],"names":["$34b668c5ec79c688$export$62cdbe59b53bcfdb","window","matchMedia","matches","document","querySelector","insertAdjacentElement","constructor","this","element","createElement","innerHTML","addEventListener","event","preventDefault","action","script","repo","label","theme","themeStylesheet","getElementById","value","href","message","type","contentWindow","postMessage","location","origin","copyTextToClipboard","textContent","outputConfig","mapping","mappingAttr","makeConfigScriptAttribute","makeConfigScript","name","attrs","text","textArea","style","cssText","body","appendChild","select","execCommand","err","removeChild"],"version":3,"file":"index.26a0c546.js.map"}